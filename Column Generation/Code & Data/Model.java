import java.util.*;

import ilog.concert.IloException;
import ilog.concert.IloNumExpr;
import ilog.concert.IloNumVar;
import ilog.concert.IloRange;
import ilog.cplex.IloCplex;

/**
 * Converts a binpacking problem into a mathematical programming model managed by CPLEX.
 * @author Wessel Boosman
 */

public class Model
{
    private InitialPacking instance;
//    private BinPackingInstance instanceBin;
        private IloCplex cplex;
        private final Map<Integer,IloNumVar> varMap;
        private final Map<Integer,IloRange> constraints;

    /**
     * Constructor that takes a list of initial possibilities of packings.
     * @param instance HashMap of these packings
     * @throws IloException if something goes wrong with CPLEX
     */

    public Model(InitialPacking instance) throws IloException
    {
        // Initialize the instance variables
        this.instance = instance;
        this.cplex = new IloCplex();
        // Create a map to link items to variables
        this.varMap = new LinkedHashMap<>();
        this.constraints = new LinkedHashMap<>();
        // Initialize the model. It is important to initialize the variables first!
        addVariables();
        addBinpackingConstraint();
        addObjective();

        // Optionally: export the model to a file, so we can check the mathematical
        // program generated by CPLEX
        cplex.exportModel("model11.lp");
//        // Optionally: suppress the output of CPLEX
//        cplex.setOut(null);
//        cleanup();

    }
    public  int  getVarMap(){
        int c =5;
        return instance.getInitialPackings().get(0).get(0);
    }
    public IloNumVar getNumVar(){
    return varMap.get(0);
}

    /**
     * Solve the Mathematical Programming Model
     * @throws IloException if something is wrong with CPLEX
     */
    public void solve() throws IloException
    {
        cplex.solve();
    }

    /**
     * Checks whether the current solution to the model is feasible
     * @return the feasibility of the model
     * @throws IloException if something is wrong with CPLEX
     */
    public boolean isFeasible() throws IloException
    {
        return cplex.isPrimalFeasible();
    }

//Returns dual variables
    public List<Double> getDuals() throws IloException
    {
        List<Double> duals = new ArrayList<Double>();
        for (int i=0; i<constraints.size();i++  ){
            Double constraintDual = cplex.getDual(constraints.get(i));
            duals.add(constraintDual);
        }
        return duals;
    }

    /**
     * Create a list of the bins for which the decision variables
     * are one in the current solution of the mathematical program.
     * @return a list of selected items
     * @throws IloException if something is wrong with CPLEX
     */
    public List<Double> getSolution() throws IloException
    {
        List<Double> result = new ArrayList<>();
        for (int i : varMap.keySet())
//        for (int i = 0; i<instance.getInitialPackings().size(); i++)
        {
            IloNumVar var = varMap.get(i);
            double value = cplex.getValue(var);
//            if (value > 0.0)
//            {
                result.add(value);
//            }
        }
        return result;
    }
    public HashMap<Integer, ArrayList<Integer>> getPackings() throws IloException
    {
        HashMap<Integer, ArrayList<Integer>> result = new HashMap<Integer, ArrayList<Integer>>();
        for (int i : varMap.keySet())
//        for (int i = 0; i<instance.getInitialPackings().size(); i++)
        {
            IloNumVar var = varMap.get(i);
            double value = cplex.getValue(var);
            if (value > 0.0)
            {
                ArrayList<Integer> a = new ArrayList<>();
                for (int j=0; j< instance.getNumItems();j++){
                    a.add(instance.getInitialPackings().get(j).get(i));
                }
                result.put(i,a);
            }
        }
        return result;
    }

    /**
     * Cleans up the CPLEX model in order to free up some memory.
     * This is important if you create many models, as memory used
     * by CPLEX is not freed up automatically by the JVM.
     * @throws IloException if something goes wrong with CPLEX
     */
    public void cleanup() throws IloException
    {
        cplex.clearModel();
        cplex.end();
    }
    public double getObjective() throws IloException
    {
        return cplex.getObjValue();
    }

    private void addObjective() throws IloException
    {
        // Initialize the objective sum to 0
        IloNumExpr obj = cplex.constant(0);
//        for (int i = 0; i < instance.getNumPackings(); i++)
        for (int i =0; i<instance.getNumPackings(); i++)
        {
            IloNumVar var = varMap.get(i);
            // Take the sum of bin as the objective value
            obj = cplex.sum(obj, var);
        }
        // Add the obj expression as a minimization objective
        cplex.addMinimize(obj);
    }


    private void addBinpackingConstraint() throws IloException {
        // Initialize the left-hand side of our constraint to 0
//        List<IloRange> constraints = new ArrayList<IloRange>();
        for (int j = 0; j < instance.getNumItems(); j++) {
            IloNumExpr lhs = cplex.constant(0);
            for (int i : varMap.keySet())
            {
//            for (int i = 0; i < instance.getNumPackings(); i++) {
                IloNumVar var = varMap.get(i);
                // Take the product of the decision variable and the item weight
                IloNumExpr term = cplex.prod(instance.getInitialPackings().get(j).get(i), var);
                // Add the term to the left hand side summation
                lhs = cplex.sum(lhs, term);
            }
            // Add the constraint lhs <= capacity to the model
            IloRange constraint = cplex.addGe(lhs, 1);
            constraints.put(j,constraint);
        }
    }

    private void addVariables() throws IloException
    {
        for (int i =0; i<instance.getNumPackings(); i++)
        {
            IloNumVar var = cplex.numVar(0, Double.MAX_VALUE);
            varMap.put(i, var);
        }
    }
}
